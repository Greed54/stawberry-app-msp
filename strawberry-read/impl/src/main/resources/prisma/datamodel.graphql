type SEmployee {
    id: ID! @id
    coreID: String @unique
    cardId: String @unique
    firstName: String
    lastName: String
    employeeRole: String
    note: String
    team: STeam @relation(name: "TeamEmployeeRelation")
    boxes: [SBox!]! @relation(name: "BoxEmployeeRelation")
    person: SPerson @relation(name: "PersonEmployeeRelation")
    createdBy: SPerson @relation(name: "CreatedEmployeeRelation")
    _createdAt: DateTime
    modifiedBy: SPerson @relation(name: "ModifiedEmployeeRelation")
    modifiedAt: DateTime
    removed: Boolean
}

type STeam {
    id: ID! @id
    coreID: String @unique
    teamName: String
    teamLead: SEmployee @relation(name: "TeamLeadEmployeeRelation")
    employees: [SEmployee!]! @relation(name: "TeamEmployeeRelation")
    createdBy: SPerson @relation(name: "CreatedTeamRelation")
    _createdAt: DateTime
    modifiedBy: SPerson @relation(name: "ModifiedTeamRelation")
    modifiedAt: DateTime
    removed: Boolean
}

type SWorkDay {
    id: ID! @id
    coreID: String @unique
    date: DateTime
    teams: [STeam!]!
    pricePerKilo: Float
    tareWeight: Float
    _createdAt: DateTime
    modifiedBy: SPerson
    modifiedAt: DateTime
    removed: Boolean
}

type SBox {
    id: ID! @id
    coreID: String @unique
    employee: SEmployee @relation(name: "BoxEmployeeRelation")
    workDay: SWorkDay
    kilograms: Float
    boxAmount: Int
    weightId: Int
    _createdAt: DateTime
    modifiedBy: SPerson
    modifiedAt: DateTime
    removed: Boolean
}

type SPerson {
    id: ID! @id
    coreID: String @unique
    firstName: String
    lastName: String
    username: String
    isAdmin: Boolean
    removed: Boolean
    _createdAt: DateTime
    modifiedAt: DateTime
}

scalar DateTime
scalar Long
